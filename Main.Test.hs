-- Prereq: Install doctest if needed
-- Usage: Run
--   doctest Main.Test

module Main.Test where

import Grammar
import Main

-- | Unit tests the semantics of the conditional expression.
--
--   >>> ifExpr (B True) (I 5) (I 3) []
--   I 5
--
--   >>> ifExpr (B False) (I 5) (I 3) []
--   I 3
--
--   >>> ifExpr (B True) (S "abc") (I 123) []
--   S "abc"
--
--   >>> ifExpr (B False) (S "123") (B True) []
--   B True
--
--   >>> ifExpr (I 1) (S "123") (I 123) []
--   Error "Cannot branch expressions based on non-boolean condition"
--
--   >>> ifExpr (I 0) (S "123") (I 123) []
--   Error "Cannot branch expressions based on non-boolean condition"

-- | Unit tests the semantics of the string concatenation expression.
--
--   >>> strConcat (S "foo") (S "bar")
--   S "foobar"
--
--   >>> strConcat (S "123") (S "456")
--   S "123456"
--
--   >>> strConcat (S "foo") (I 3)
--   Error "Cannot concatenate non-strings"
--
--   >>> strConcat (B False) (S "foo")
--   Error "Cannot concatenate non-strings"
--
--   >>> strConcat (I 3) (B True)
--   Error "Cannot concatenate non-strings"

-- | Unit tests the semantics of arithmetic expression.
--
--   >>> arithExpr Add (I 5) (I 3)
--   I 8
--
--   >>> arithExpr Sub (I 3) (I 5)
--   I (-2)
--
--   >>> arithExpr Mul (I 4) (I 5)
--   I 20
--
--   >>> arithExpr Add (S "123") (S "456")
--   Error "Cannot perform arithmetic operation on non-integers"
--
--   >>> arithExpr Sub (I 123) (S "456")
--   Error "Cannot perform arithmetic operation on non-integers"
--
--   >>> arithExpr Mul (B True) (S "456")
--   Error "Cannot perform arithmetic operation on non-integers"

-- | Unit tests the semantics of the unary boolean expression.
--
--   >>> boolExprUn Not (B True)
--   B False
--
--   >>> boolExprUn Not (B False)
--   B True
--
--   >>> boolExprUn Not (I 5)
--   Error "Cannot perform unary boolean operation on non-booleans"
--
--   >>> boolExprUn Not (S "True")
--   Error "Cannot perform unary boolean operation on non-booleans"

-- | Unit tests the semantics of binary boolean expressions.
--
--   >>> boolExprBi Eq (I 5) (I 5)
--   B True
--
--   >>> boolExprBi Eq (S "foo") (S "foo")
--   B True
--
--   >>> boolExprBi Gt (I 3) (I 2)
--   B True
--
--   >>> boolExprBi Lt (I 45) (I 43)
--   B False
--
--   >>> boolExprBi Gte (I 45) (I 43)
--   B True
--
--   >>> boolExprBi Lte (I 5) (I 5)
--   B True
--
--   >>> boolExprBi Lt (S "abc") (S "def")
--   Error "Cannot perform inequality boolean operations on strings"
--
--   >>> boolExprBi Eq (I 123) (S "123")
--   Error "Cannot perform binary boolean operation on non-strings or non-integers or mismatched types"

-- | Unit tests for bindings
--
--  >>> refExpr "a" [("a", I 3)]
--  I 3
--
--  >>> addBindings [("a", I 4)] [("b", I 5), ("a", I 3), ("c", I 6)]
--  [("b",I 5),("a",I 4),("c",I 6)]
--
--  >>> expr (Ref "a") []
--  Error "Value of a not found"
--
-- | Integration tests for functions, bindings, along with other features
--
--  >>> expr (Let [("a", I 3)] (Ref "a")) []
--  I 3
--
--  >>> expr (Let [("a", I 3)] ( Let [("a", I 4)] (Ref "a") )) []
--  I 4
--
--  >>> expr (Let [("a", (If (B True) (I 3) (I 4)) )] (Ref "a")) []
--  I 3
--
--  >>> expr (Let [("a", (ArithExpr Add (I 1) (I 2)))] (Ref "a")) []
--  I 3
--
-- | Integration tests for functions
--
--  >>> expr (Func "ais3" ["a"] (BoolExprBi Eq (Ref "a") (I 3)) (Ref "ais3")) []
--  C [] ["a"] (BoolExprBi Eq (Ref "a") (I 3))
--
--  >>> expr (Func "ais3" ["a"] (BoolExprBi Eq (Ref "a") (I 3)) (Call "ais3" [I 3])) []
--  B True
--
-- | Integration test for Static Scoping
--
--  let x = 3
--  define addToX (a) { x + a }
--  let x = 4
--  let y = addToX (5)
--  -> y = 8
--
--  >>> :{
--  expr (
--  Let [("x", I 3)]
--  (Func "addToX" ["a"]
--      (ArithExpr Add (Ref "x") (Ref "a")) (
--  Let [("x", I 4),
--       ("y", Call "addToX" [I 5])]
--  (Ref "y")
--  ))) []
--  :}
--  I 8
--
--  (Static scoping expect 8, dynamic binding expect 9
--  See: https://web.engr.oregonstate.edu/~walkiner/teaching/cs381-wi20/slides/5.ScopeAndParameters.pdf)
--
-- | Integration tests for recursion
--
-- Simple recursion
-- (define (fac n)
--      if (= n 1)
--          (1)
--          (* (n) (fac (- n 1))))
-- (fac 2)
--
--  >>> :{
-- expr(
-- Func "fac" ["n"]
-- (If (BoolExprBi Eq (Ref "n") (I 1))
--      (I 1)
--      (ArithExpr Mul (Ref "n") ( Call "fac" [ArithExpr Sub (Ref "n") (I 1)] )))
-- (Call "fac" [I 2])
-- ) []
--  :}
--I 2
--
--
-- Fibbonaci
-- (define (fib n)
--     (if (= n 0) 0
--       (if (= n 1) 1
--         (+ (fib (- n 1)) (fib (- n 2))))))
--
-- (fib 2)
--
--  >>> :{
-- expr (
-- Func "fib" ["n"]
-- (If (BoolExprBi Eq (Ref "n") (I 0))
--      (I 0)
--      (If (BoolExprBi Eq (Ref "n") (I 1))
--          (I 1)
--          (ArithExpr Add
--              (Call "fib" [(ArithExpr Sub (Ref "n") (I 1))])
--              (Call "fib" [(ArithExpr Sub (Ref "n") (I 2))])
--          )
--      )
--  )
-- (Call "fib" [I 2])
-- ) []
--  :}
--I 1
